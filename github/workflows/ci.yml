# File: .github/workflows/ci.yml
name: StormNeighbor CI Pipeline

on:
  push:
    branches: [ main, develop ]
  
  pull_request:
    branches: [ main ]
  
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup test environment
        working-directory: ./backend
        run: |
          echo "NODE_ENV=test" >> .env
          echo "DATABASE_URL=postgres://test_user:test_password@localhost:5432/test_db" >> .env
          echo "JWT_SECRET=test_jwt_secret_for_ci_pipeline_only" >> .env
          echo "RESEND_API_KEY=fake_key_for_testing" >> .env
          echo "FROM_EMAIL=test@example.com" >> .env
          echo "FROM_NAME=StormNeighbor Test" >> .env
          echo "NOAA_API_BASE_URL=https://api.weather.gov" >> .env
          echo "CLOUDINARY_CLOUD_NAME=test_cloud" >> .env
          echo "CLOUDINARY_API_KEY=123456789" >> .env
          echo "CLOUDINARY_API_SECRET=test_secret" >> .env

      - name: Setup test database
        working-directory: ./backend
        run: |
          # Wait for PostgreSQL to be ready
          sleep 5
          # Run schema to create tables
          npx node scripts/setup-test-db.js

      - name: Run tests
        working-directory: ./backend
        run: npm test

      - name: Run ESLint
        working-directory: ./backend
        run: npx eslint src/ --format=stylish

  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Security audit
        working-directory: ./backend
        run: npm audit --audit-level=moderate

      - name: Check code formatting
        working-directory: ./backend
        run: npx prettier --check src/

      # Type checking (if TypeScript is added in the future)
      # - name: Type checking
      #   working-directory: ./backend
      #   run: npx tsc --noEmit

  build:
    name: üèóÔ∏è Build Verification
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Test application startup
        working-directory: ./backend
        run: |
          # Basic env vars needed for startup
          export NODE_ENV=test
          export DATABASE_URL=postgres://fake:fake@localhost:5432/fake
          export JWT_SECRET=test_secret
          export RESEND_API_KEY=fake_key
          export FROM_EMAIL=test@example.com
          export NOAA_API_BASE_URL=https://api.weather.gov
          export CLOUDINARY_CLOUD_NAME=test
          export CLOUDINARY_API_KEY=123
          export CLOUDINARY_API_SECRET=test
          
          # Try to start the server
          timeout 10 npm start || echo "App startup verification complete"

      - name: Build success
        run: echo "All checks passed, ready for deployment"