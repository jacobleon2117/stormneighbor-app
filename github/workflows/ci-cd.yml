# File: .github/workflows/ci-cd.yml
name: 🚀 StormNeighbor CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'backend/**' ]
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Deploy to Production'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.11.1'
  BACKEND_DIR: './backend'

jobs:
  # ===========================================
  # 🧪 TESTING & QUALITY CHECKS
  # ===========================================
  test:
    name: 🧪 Test & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: stormneighbor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed"

      - name: 🔍 Code Quality Checks
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          echo "🎨 Running Prettier..."
          npm run format:check
          
          echo "🔍 Running ESLint..."
          npm run lint:check
          
          echo "🔒 Security Audit..."
          npm audit --audit-level=moderate
          
          echo "✅ Code quality checks passed"

      - name: 🧪 Run Tests
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/stormneighbor_test
          JWT_SECRET: test_jwt_secret_for_ci_pipeline_only
          RESEND_API_KEY: fake_key_for_testing
          FROM_EMAIL: test@example.com
          CLOUDINARY_CLOUD_NAME: test_cloud
          CLOUDINARY_API_KEY: 123456789
          CLOUDINARY_API_SECRET: test_secret
          NOAA_API_BASE_URL: https://api.weather.gov
        run: |
          echo "🗄️ Setting up test database..."
          npm run db:setup-test
          
          echo "🧪 Running unit tests..."
          npm run test:ci
          
          echo "🔗 Running integration tests..."
          npm run test:integration
          
          echo "✅ All tests passed"

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          fail_ci_if_error: false

  # ===========================================
  # 🏗️ BUILD & PREPARE
  # ===========================================
  build:
    name: 🏗️ Build & Validate
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci --prefer-offline --no-audit --production

      - name: 🏗️ Build Application
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          echo "📦 Building production package..."
          npm run build:prod
          
          echo "🔍 Validating build..."
          node -c src/server.js
          
          echo "✅ Build completed successfully"

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: |
            backend/
            !backend/node_modules/
            !backend/coverage/
            !backend/.backup/
            !backend/*.log
          retention-days: 7

  # ===========================================
  # 🚀 STAGING DEPLOYMENT
  # ===========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📤 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: ./

      - name: 🚂 Deploy to Railway (Staging)
        uses: railwayapp/railway-deploy@v3
        with:
          service: stormneighbor-backend-staging
          project: ${{ secrets.RAILWAY_PROJECT_ID }}
          token: ${{ secrets.RAILWAY_TOKEN }}
          detach: false

      - name: 🔍 Health Check Staging
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          
          echo "🔍 Running health check..."
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1
          
          echo "✅ Staging deployment successful!"

      - name: 📱 Notify Team
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚀 StormNeighbor Backend deployed to staging!",
              attachments: [{
                color: 'good',
                fields: [{
                  title: 'Environment',
                  value: 'Staging',
                  short: true
                }, {
                  title: 'Branch',
                  value: '${{ github.ref_name }}',
                  short: true
                }, {
                  title: 'Commit',
                  value: '${{ github.sha }}',
                  short: true
                }, {
                  title: 'Health Check',
                  value: '${{ secrets.STAGING_URL }}/health',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  # ===========================================
  # 🎯 PRODUCTION DEPLOYMENT
  # ===========================================
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.deploy_to_production == 'true' || contains(github.event.head_commit.message, '[deploy-prod]'))
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📤 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: ./

      - name: 🔄 Database Migration Check
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          echo "🔍 Checking for pending migrations..."
          npm run db:migrate:check || echo "No migrations needed"

      - name: 🚂 Deploy to Railway (Production)
        uses: railwayapp/railway-deploy@v3
        with:
          service: stormneighbor-backend-prod
          project: ${{ secrets.RAILWAY_PROJECT_ID }}
          token: ${{ secrets.RAILWAY_TOKEN }}
          detach: false

      - name: 🔍 Production Health Check
        run: |
          echo "⏳ Waiting for production deployment..."
          sleep 45
          
          echo "🔍 Running comprehensive health check..."
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          
          echo "📊 Checking performance..."
          curl -f ${{ secrets.PRODUCTION_URL }}/analytics || echo "Analytics check skipped"
          
          echo "✅ Production deployment successful!"

      - name: 🎉 Success Notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🎉 StormNeighbor Backend LIVE IN PRODUCTION! 🚀",
              attachments: [{
                color: 'good',
                fields: [{
                  title: 'Environment',
                  value: 'Production 🎯',
                  short: true
                }, {
                  title: 'Version',
                  value: '${{ github.sha }}',
                  short: true
                }, {
                  title: 'Health Check',
                  value: '${{ secrets.PRODUCTION_URL }}/health',
                  short: true
                }, {
                  title: 'Deployed By',
                  value: '${{ github.actor }}',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===========================================
  # 🚨 ROLLBACK (Manual Trigger)
  # ===========================================
  rollback:
    name: 🚨 Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback == 'true'
    environment: production
    
    steps:
      - name: 🚨 Rollback Production
        uses: railwayapp/railway-deploy@v3
        with:
          service: stormneighbor-backend-prod
          project: ${{ secrets.RAILWAY_PROJECT_ID }}
          token: ${{ secrets.RAILWAY_TOKEN }}
          rollback: true

      - name: 📢 Rollback Notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚨 EMERGENCY ROLLBACK EXECUTED",
              attachments: [{
                color: 'warning',
                fields: [{
                  title: 'Action',
                  value: 'Production Rollback',
                  short: true
                }, {
                  title: 'Triggered By',
                  value: '${{ github.actor }}',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}