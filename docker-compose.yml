version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  db:
    image: postgis/postgis:15-3.4
    container_name: stormneighbor-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: stormneighbor
      POSTGRES_USER: stormneighbor
      POSTGRES_PASSWORD: ${DB_PASSWORD:-stormneighbor123}
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - stormneighbor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stormneighbor -d stormneighbor"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Optional - for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: stormneighbor-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-stormneighbor123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - stormneighbor-network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-stormneighbor123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stormneighbor-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://stormneighbor:${DB_PASSWORD:-stormneighbor123}@db:5432/stormneighbor
      - REDIS_URL=redis://:${REDIS_PASSWORD:-stormneighbor123}@redis:6379
      # Add other required environment variables
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - NOAA_API_KEY=${NOAA_API_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stormneighbor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: stormneighbor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - stormneighbor-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  stormneighbor-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up